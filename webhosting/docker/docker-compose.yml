services:
  # Django Web Service
  web:
    build:
      context: ../../ # Assuming your Dockerfile is in webhost/docker/
      dockerfile: webhosting/docker/Dockerfile
    container_name: django_app
    restart: unless-stopped
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ../../:/app # Mounting the entire project directory
      - static_volume:/app/staticfiles # Static files volume
      - media_volume:/app/media # Media files volume
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
    ports:
      - 8000:8000
    networks:
      - webnet

  # Caddy Service
  caddy:
    image: caddy:latest
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../webhosting/containers/caddy/Caddyfile:/etc/caddy/Caddyfile
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - web
    networks:
      - webnet
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}

  # Cloudflared Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    command: tunnel --no-autoupdate run --url https://caddy:443 --token ${TUNNEL_TOKEN}
    environment:
      - TUNNEL_TOKEN=${TUNNEL_TOKEN}
    networks:
      - webnet
    depends_on:
      - caddy

volumes:
  static_volume:
  media_volume:
  caddy_data:
  caddy_config:

networks:
  webnet:
    driver: bridge
